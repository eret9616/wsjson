{"version":3,"sources":["webpack://wsjson/webpack/universalModuleDefinition","webpack://wsjson/./src/defaults/heartBeat.js","webpack://wsjson/./src/defaults/reconnect.js","webpack://wsjson/./src/defaults/serialize.js","webpack://wsjson/./src/index.js","webpack://wsjson/./src/wrapper.js","webpack://wsjson/webpack/bootstrap","webpack://wsjson/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","msg","res","interval","missedMax","timeout","maxRetry","serializer","val","JSON","stringify","deserializer","result","parse","error","Error","WebSocket","url","options","reconnect","heartBeat","serialize","WebSocketConfig","Object","assign","undefined","subprotocol","heartBeatInterval","heartBeatMissedMax","heartBeatMsg","heartBeatRes","reconnectTimeout","reconnectMaxretry","this","latestState","state","data","listeners","onmessage","onerror","onclose","onopen","closeWithoutError","retryTime","_config","initSocket","Proxy","obj","prop","value","keys","includes","get","_socket","e","target","readyState","_timer","heartbeatMissed","setInterval","send","type","console","message","close","bind","Data","messageEvents","forEach","f","clearInterval","log","setTimeout","cb","push","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"ws-json.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"wsjson\"] = factory();\n\telse\n\t\troot[\"wsjson\"] = factory();\n})(self, function() {\nreturn ","module.exports = {\n    msg:'PING',\n    res:'PONG',\n    interval:12000,\n    missedMax:3\n}","module.exports = {\n    timeout:8000,\n    maxRetry:3\n}","exports.serializer=(val)=> {\n    return JSON.stringify(val);\n}\n\nexports.deserializer =(val)=> {\n    let result;\n    try {\n        result = JSON.parse(val);\n        return result;\n    } catch (error) {\n        throw new Error('反序列化时出现错误' + error);\n    }\n}","\nconst WebSocket = require('./wrapper')\n\nfunction wsjson (url,options) {\n    return new WebSocket(url, options);\n}\n\nmodule.exports = wsjson\n","const reconnect = require('./defaults/reconnect');\nconst heartBeat = require('./defaults/heartBeat');\nconst serialize = require('./defaults/serialize')\n\nclass WebSocketConfig {\n\n    constructor(options) {\n        return Object.assign({\n\n            url: undefined,\n            subprotocol: undefined,\n            serializer: serialize.serializer, \n            deserializer: serialize.deserializer,\n            heartBeatInterval: heartBeat.interval, // 心跳间隔\n            heartBeatMissedMax: heartBeat.missedMax, // 最大心跳失败次数\n            heartBeatMsg: heartBeat.msg, // 客户端发送的msg \n            heartBeatRes: heartBeat.res, // 服务端响应的res\n            reconnectTimeout: reconnect.timeout, \n            reconnectMaxretry: reconnect.maxRetry,\n\n        }, options);\n    }\n}\n\nclass Websocket {\n\n    constructor(url, options = {}) {\n        this.latestState = {\n            state: undefined,\n            data: undefined,\n        };\n\n        this.listeners = {\n            onmessage: undefined,\n            onerror: undefined,\n            onclose: undefined,\n            onopen: undefined,\n        };\n\n        this.closeWithoutError = false\n        this.retryTime = 0;\n        this._config = new WebSocketConfig({ url, ...options });\n        this.initSocket();\n\n        const handler = {\n            set(obj, prop, value) {\n                if (Object.keys(obj.listeners).includes(prop)) {\n                    if (typeof value !== 'function') {\n                        throw new Error('listener应当传入函数');\n                    }\n                    obj.listeners[prop] = value;\n                } else {\n                    obj[prop] = value;\n                }\n                return true;\n            },\n            get(obj, prop) {\n                return obj[prop];\n            },\n        };\n        return new Proxy(this, handler);\n    }\n\n    initSocket() {\n        this._socket = new WebSocket(this._config.url, this._config.subprotocol);\n        this._socket.onopen = e => {\n\n            this.latestState.state = e.target.readyState;\n            this.latestState.data = undefined;\n            this.listeners.onopen && this.listeners.onopen(e);\n\n            if (this._timer === undefined) {\n\n                this.heartbeatMissed = 0;\n                this._timer = setInterval(function () {\n                    try {\n                        this.heartbeatMissed++;\n                        if (this.heartbeatMissed >= this._config.heartBeatMissedMax) {\n                            throw new Error('后台未响应');\n                        }\n                        //                '     PING'\n                        this.send({ type: heartBeat.msg });\n                    } catch (error) {\n                        console.error('关闭连接，原因:' + error.message);\n                        this.close(true);\n                    }\n                }.bind(this), this._config.heartBeatInterval);\n            }\n        };\n\n        this._socket.onmessage = e => {\n\n            if (e.data) {\n                const Data = this._config.deserializer(e.data);\n                //                               'PONG'\n                if (Data.type === this._config.heartBeatRes) {\n                    this.heartbeatMissed = 0;\n                    return;\n                }\n                this.latestState.state = e.target.readyState;\n                this.latestState.data = Data;\n                /*\n                Data:\n                    {\n                         type: any\n                         data: {... }\n                    }\n                */\n                try {\n                    const type = Data.type;\n                    this.messageEvents[type].forEach(f => f(Data.data));\n                } catch (error) {/* TODO */}\n\n            }\n            this.listeners.onmessage && this.listeners.onmessage(e);\n        };\n\n        this._socket.onerror = e => {\n            this.listeners.onerror && this.listeners.onerror(e);\n        };\n\n        this._socket.onclose = e => {\n\n            clearInterval(this._timer);\n            this._timer = undefined;\n            \n            this.listeners.onclose && this.listeners.onclose(e);\n\n            if(this.closeWithoutError){\n                console.log('连接已关闭')\n                return\n            } else{\n                console.error(`连接已关闭，${this._config.reconnectTimeout}毫秒后尝试重新连接，重试次数${this.retryTime}`);\n\n                if (this._config.reconnectMaxretry === this.retryTime) {\n                    console.error(`达到最大重试次数${this._config.reconnectMaxretry},不再尝试连接`);\n                    return;\n                }\n\n                setTimeout(() => {\n                    this.reconnect();\n                }, this._config.reconnectTimeout);\n            }\n        };\n\n        this.latestState.state = undefined;\n        this.latestState.data = undefined;\n        this._timer = undefined;\n        this.heartbeatMissed = 0;\n        this.messageEvents = {};\n    }\n    on(type, cb) {\n        if (!this.messageEvents[type]) {\n            this.messageEvents[type] = [];\n        }\n        this.messageEvents[type].push(cb);\n    }\n    reconnect() {\n        this.retryTime++;\n        this.initSocket();\n    }\n    send(data) {\n        this._socket.send(this._config.serializer(data));\n    }\n    close(error=false) {\n        !error && (this.closeWithoutError=true)\n        this._socket.close();\n    }\n}\n\nmodule.exports =  Websocket;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(138);\n"],"sourceRoot":""}