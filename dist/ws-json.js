!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.wsjson=t():e.wsjson=t()}(self,(function(){return e={558:e=>{e.exports={msg:"PING",res:"PONG",interval:12e3,missedMax:3}},927:e=>{e.exports={timeout:8e3,maxRetry:3}},414:(e,t)=>{t.serializer=e=>JSON.stringify(e),t.deserializer=e=>{let t;try{return t=JSON.parse(e),t}catch(e){throw new Error("反序列化时出现错误"+e)}}},138:(e,t,s)=>{const i=s(607);e.exports=function(e,t){return new i(e,t)}},607:(e,t,s)=>{const i=s(927),r=s(558),o=s(414);class n{constructor(e){return Object.assign({url:void 0,subprotocol:void 0,serializer:o.serializer,deserializer:o.deserializer,heartBeatInterval:r.interval,heartBeatMissedMax:r.missedMax,heartBeatMsg:r.msg,heartBeatRes:r.res,reconnectTimeout:i.timeout,reconnectMaxretry:i.maxRetry},e)}}e.exports=class{constructor(e,t={}){return this.latestState={state:void 0,data:void 0},this.listeners={onmessage:void 0,onerror:void 0,onclose:void 0,onopen:void 0},this.closeWithoutError=!1,this.retryTime=0,this._config=new n({url:e,...t}),this.initSocket(),new Proxy(this,{set(e,t,s){if(Object.keys(e.listeners).includes(t)){if("function"!=typeof s)throw new Error("listener应当传入函数");e.listeners[t]=s}else e[t]=s;return!0},get:(e,t)=>e[t]})}initSocket(){this._socket=new WebSocket(this._config.url,this._config.subprotocol),this._socket.onopen=e=>{this.latestState.state=e.target.readyState,this.latestState.data=void 0,this.listeners.onopen&&this.listeners.onopen(e),void 0===this._timer&&(this.heartbeatMissed=0,this._timer=setInterval(function(){try{if(this.heartbeatMissed++,this.heartbeatMissed>=this._config.heartBeatMissedMax)throw new Error("后台未响应");this.send({type:r.msg})}catch(e){console.error("关闭连接，原因:"+e.message),this.close(!0)}}.bind(this),this._config.heartBeatInterval))},this._socket.onmessage=e=>{if(e.data){const t=this._config.deserializer(e.data);if(t.type===this._config.heartBeatRes)return void(this.heartbeatMissed=0);this.latestState.state=e.target.readyState,this.latestState.data=t;try{const e=t.type;this.messageEvents[e].forEach((e=>e(t.data)))}catch(e){}}this.listeners.onmessage&&this.listeners.onmessage(e)},this._socket.onerror=e=>{this.listeners.onerror&&this.listeners.onerror(e)},this._socket.onclose=e=>{clearInterval(this._timer),this._timer=void 0,this.listeners.onclose&&this.listeners.onclose(e),this.closeWithoutError?console.log("连接已关闭"):(console.error(`连接已关闭，${this._config.reconnectTimeout}毫秒后尝试重新连接，重试次数${this.retryTime}`),this._config.reconnectMaxretry!==this.retryTime?setTimeout((()=>{this.reconnect()}),this._config.reconnectTimeout):console.error(`达到最大重试次数${this._config.reconnectMaxretry},不再尝试连接`))},this.latestState.state=void 0,this.latestState.data=void 0,this._timer=void 0,this.heartbeatMissed=0,this.messageEvents={}}on(e,t){this.messageEvents[e]||(this.messageEvents[e]=[]),this.messageEvents[e].push(t)}reconnect(){this.retryTime++,this.initSocket()}send(e){this._socket.send(this._config.serializer(e))}close(e=!1){!e&&(this.closeWithoutError=!0),this._socket.close()}}}},t={},function s(i){if(t[i])return t[i].exports;var r=t[i]={exports:{}};return e[i](r,r.exports,s),r.exports}(138);var e,t}));
//# sourceMappingURL=ws-json.js.map